{
	"info": {
		"_postman_id": "a5df7f0f-af47-418c-98ff-8e8f5631bd35",
		"name": "Examen",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "feece548-75a6-40dd-92a5-0ef1c910733c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let utils = eval(environment.utils)();\r",
							"\r",
							"utils.p.validarDato(\"Validar code\", \"status\");\r",
							"var status = pm.response.json().status;\r",
							"utils.p.datosIguales(\"Validar estatus\", \"Listos para el examen\", status,\"true\");\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/status",
					"host": [
						"{{URL}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "RandomName",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e7a2c20b-f944-4ea0-8b43-f8ac9847b451",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"let utils = eval(environment.utils)();\r",
							"\r",
							"utils.p.validarDato(\"Validar code\", \"name\");\r",
							"var status = pm.response.json().status;\r",
							"\r",
							"var data = JSON.parse(responseBody);\r",
							"pm.environment.set(\"Name\", data.name);\r",
							"\r",
							"/*var name = pm.response.json().name;\r",
							"utils.p.datosIguales(\"Validar name random\", \"Name\", name,\"true\");\r",
							"console.log(\"Name\");\r",
							"*/\r",
							"pm.test(\"Response status es igual\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"pm.expect(jsonData.name).to.eql(pm.variables.get(\"Name\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "testpass",
							"type": "string"
						},
						{
							"key": "username",
							"value": "testuser",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/randomName",
					"host": [
						"{{URL}}"
					],
					"path": [
						"randomName"
					]
				}
			},
			"response": []
		},
		{
			"name": "RandomName sin au",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ac3d0376-3625-471d-b1ea-bbea0fd3d2ea",
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"\r",
							"let utils = eval(environment.utils)();\r",
							"var message = pm.response.json().message;\r",
							"utils.p.datosIguales(\"Validar estatus\", \"Please login first\", message,\"true\");\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/randomName",
					"host": [
						"{{URL}}"
					],
					"path": [
						"randomName"
					]
				}
			},
			"response": []
		},
		{
			"name": "sameName",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{Name}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/sameName",
					"host": [
						"{{URL}}"
					],
					"path": [
						"sameName"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateName",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c9f0b571-5ee8-46d0-b38b-7120c3df1cff",
						"exec": [
							"pm.test(\"Status code is 406\", function () {\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"\r",
							"let utils = eval(environment.utils)();\r",
							"var message = pm.response.json().message;\r",
							"utils.p.datosIguales(\"Validar message\", \"Name was not provided\", message,\"true\");\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/updateName",
					"host": [
						"{{URL}}"
					],
					"path": [
						"updateName"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "812ef1ca-ca82-468a-8e7f-69818f991f3e",
				"type": "text/javascript",
				"exec": [
					"postman.setEnvironmentVariable(\"utils\", () => {",
					"       var status200 = () => {",
					"        pm.test(\"Estado del servicio\", function () {",
					"            pm.response.to.have.status(200);",
					"        });",
					"    }//status200",
					"      ",
					"    /*var imprimirBody = () => {",
					"        console.log(\"El Response \"+pm.response.text());",
					"    }//imprimirBody*/",
					"      ",
					"    /*var status400 = () => {",
					"        pm.test(\"Estado del servicio\", function () {",
					"        pm.response.to.have.status(400);",
					"        });",
					"    }//status400*/",
					"    ",
					"  /*  var clientAuteticated = () => {",
					"        pm.test(\"El Cliente esta autorizado\", function () {",
					"            pm.expect(pm.response.text()).to.not.include(\"El Cliente no esta autorizado\")",
					"        });",
					"    }//clientAuteticated",
					"*/",
					"    var setCurrentDate = (format) => {",
					"       const moment = require('moment');",
					"       pm.environment.set(\"timestamp\", moment().format(format));",
					"    }//clientAuteticated",
					"",
					"    var validarDato = (nameAssert,dato) => {",
					"            //console.log(\"Valor del dato1:\" +pm.response.text());",
					"            //console.log(\"Valor del dato2:\" +dato);",
					"        if( undefined===dato) {",
					"        pm.test((nameAssert+\" dato es indefinido\"), function () {",
					"           pm.expect(pm.response.text()).to.not.include(dato);",
					"        });",
					"        }else{",
					"        if( null===dato) {",
					"          pm.test((nameAssert+\" dato es nulo\"), function () {",
					"       ",
					"            pm.expect(pm.response.text()).to.not.include(dato);",
					"        });",
					"        }",
					"        else{",
					"              pm.test(nameAssert, function () {",
					"            ",
					"            pm.expect(pm.response.text()).to.include(dato);",
					"        });",
					"        }",
					"        }",
					"       ",
					"    }//validarDato",
					"    ",
					"    var pakageBasicValidation = () => {",
					"       // incluirToken();",
					"        status200();",
					"       // clientAuteticated();",
					"        //imprimirBody();",
					"    }//packageBasicValidation",
					"    ",
					"    var datosIguales = (nameAssert,variable,jsonValue,flag) => {",
					"        pm.test(nameAssert, function () {",
					"            if (flag === true){",
					"                variable = pm.variables.get(variable);",
					"            }",
					"            // funciÃ³n para convertir todos los valores obtenidos en String ",
					"            let valueVar = String(variable);",
					"            jsonValue = String(jsonValue); ",
					"            var jsonData = pm.response.json();",
					"            console.log(\"Valor del ambiente o dataset:\" +valueVar);",
					"            console.log(\"Valor del respond:\" +jsonValue);",
					"            pm.expect(jsonValue).to.eql(valueVar);",
					"        });",
					"    }//datosIguales",
					"    ",
					"    var CampoVacio = (nameAssert,jsonKey) => {",
					"        pm.test(nameAssert, function () {",
					"            if(jsonKey===0){",
					"                 jsonKey = null",
					"            }",
					"          pm.expect(jsonKey).to.eql(null && undefined);",
					"         });",
					"    }",
					"    ",
					"    var CampoNoVacio = (nameAssert,jsonKey) => {",
					"        pm.test(nameAssert, function () {",
					"            if(jsonKey!==0 || jsonKey === \"\"){",
					"                 jsonKey = null",
					"                jsonKey = 'Sin dato'",
					"            }",
					"          pm.expect(jsonKey).to.eql(null && undefined);",
					"         });",
					"    }",
					"    ",
					"    return {",
					"        p: {",
					"            //incluirToken,",
					"            status200,",
					"           // clientAuteticated,",
					"            validarDato,",
					"           // pakageBasicValidation,",
					"          //  setCurrentDate,",
					"            //imprimirBody,",
					"          //  CampoVacio,",
					"            datosIguales",
					"        }//p",
					"    };//return",
					"});//utils"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b34a9c60-32af-4a2e-bbe2-1d4434406fad",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}